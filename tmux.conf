# $Id: screen-keys.conf,v 1.7 2010-07-31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# set $TERM for 256 color support
#set -g default-terminal "rxvt-unicode-256color"
set -g default-terminal "screen-256color"
set -g terminal-overrides "*:sitm@,ritm@,bce,colors=88,*88col*:colors=88,*256col*:colors=256"
#set -g terminal-overrides "rxvt-unicode-256color:sitm@"
#set -g terminal-overrides 'screen*:smcup@:rmcup@'

# enable utf8
setw -g utf8 on

# show message on alert (visual bell)
set -g visual-activity on

# init windows
new -s tmux

# Prevent sourcing of /etc/profile which messes up $PATH
set -g default-shell /bin/zsh

# statusbar properties
set -g status-interval 1
set -g status-bg black
set -g status-fg white
#set -g window-status-alert-bg red
#set -g window-status-alert-fg black
set -g status-left-length 100
set -g status-left " #[fg=#4c4d4e]#S@ #[fg=#72c03d]#T        "
set -g status-right "#(acpi -b | awk '{ str=$4; sub\\(/,/, null, str\\); print str }') #[fg=#585858]%H:%M:%S "
set -g status-justify left
set -g window-status-format "#I #W" # window number,program name,active (or not)
set -g window-status-current-format "#[bg=#202020]#[fg=#72c03d] #I #W "
set -g window-status-current-attr none

# command/message line colors
set -g message-fg white
set -g message-bg black

# try setting correct win-title
set -g set-titles on

# wm window title string (uses statusbar variables)
set -g set-titles-string "tmux:#I #W"

# Automatically set window title
setw -g automatic-rename on

# resize a window based on the smallest client actually viewing it, not on the smallest one attached to the entire session
setw -g aggressive-resize on

# pane border color
set -g pane-active-border-fg '#72c03d'
set -g pane-border-fg '#282828'

# don't kill windows after cmd finish
# set-option -g remain-on-exit on

# mouse support
# hint: to copy/paste|select using mouse hold Shift + click2|scroll
set -g mouse on

#set -g set-clipboard on

# set vi keys
#set -g status-keys vi
#setw -g mode-keys vi
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# Reload key
bind r source-file ~/.config/tmux/tmux.conf \; display-message "reloading..."

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lock l
# unbind l
# bind l lock-server

# kill pane (unsplit)
# x
unbind x
bind x kill-pane

# screen ^C c
unbind ^C
bind C neww -c "#{pane_current_path}"
#bind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^?
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
#unbind p
#bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \
unbind q
bind q confirm-before "kill-server"

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L
unbind ^L
bind ^L refresh-client

# split -v |
unbind |
bind | split -h -c "#{pane_current_path}" # horizontal split in cwd

# split -h S
unbind S
bind S split -v -c "#{pane_current_path}" # vertical split in cwd

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window

# copy tmux buffer to clipboard
# bind y run "tmux show-buffer | xclip -i"
# move x clipboard into tmux paste buffer
# bind C-p run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"
bind C-c run "tmux show-buffer | xclip -i -selection clipboard"
bind C-v run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

bind L new-window "/home/pschmitt/bin/ssh_lxl.sh"
bind P new-window "ssh alarmpi"
bind J new-window -n journal "zsh -ic jxf -l"
bind T new-window -n tmp -c "/tmp"
